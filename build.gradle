buildscript {
    ext { // ext키워드는 build.gradle에서 사용할 전역변수를 설정하는 키워드이다.
        springBootVersion = '2.1.9.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies { // 이 프로젝트의 의존성 관리를 위한 설정
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") // ext에서 전역변수로 설정한 springBootVersion를 사용
    }
}

// 앞서 선언한 플러그인 의존성들을 적용할 것인지 결정하는 코드, 이하 4개의 플러그인은 사실상 필수이고 항상 추가해야한다.
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management' // 스프링부트 의존성을 관리하는 플러그인, 꼭 필요하다

group 'com.where-code'
version '1.0.0-SNAPSHOT'
sourceCompatibility = 1.8

/*
    각종 의존성(라이브러리)들을 어떤 원격 저장소에서 다운받을것인지 정한다. 기본적으로 mavenCentral을 많이 사용하지만 업로드 난이도 때문에 최근 jcenter을 많이 사용하는 추세이다.
    여기서 말하는 업로드 난이도는 내가 개발한 라이브러리를 저장소로 업로드하는데 까다롭다는 의미이다.
*/
repositories {
    mavenCentral()
    jcenter()
}

// 프로젝트 개발에 필요한 의존성들을 선언하는 곳 (인텔리제이는 메이븐 저장소의 데이터를 인덱싱해서 관리하기 때문에 의존성 자동완성 사용이 가능하다.)
dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.projectlombok:lombok')
//    compile('org.springframework.boot:spring-boot-starter-data-jpa')
//    compile('org.springframework.boot:spring-boot-starter-mustache')
//    compile('com.h2database:h2')

//    compile('org.springframework.boot:spring-boot-starter-oauth2-client')
//    compile('org.springframework.session:spring-session-jdbc')

//    compile("org.mariadb.jdbc:mariadb-java-client")

    testCompile('org.springframework.boot:spring-boot-starter-test')
//    testCompile("org.springframework.security:spring-security-test")
}
